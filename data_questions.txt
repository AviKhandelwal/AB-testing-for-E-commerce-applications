AB TESTING

1. Find out the total people who participated in AB testing?

SELECT COUNT(DISTINCT user_id)
FROM dsv1069.events
WHERE event_name = 'test_assignment'

count
97292


2. How many tests are running right now?

test_id
4
5
6
7

4 AB tests are running as of now.

3. On each day, how many people participate in any given AB tests?

SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day
limit 10;

test_id		day		event_rows
4	2013-05-25 00:00:00	1128
4	2013-05-26 00:00:00	1023
4	2013-05-27 00:00:00	1088
4	2013-05-28 00:00:00	1114
4	2013-05-29 00:00:00	1067
4	2013-05-30 00:00:00	1072
4	2013-05-31 00:00:00	1083
4	2013-06-01 00:00:00	1116
4	2013-06-02 00:00:00	1073
4	2013-06-03 00:00:00	1070

4. Find out the start and end dates of the AB tests and see if any of them coincide?

SELECT test_id,
      min(day) AS event_started,
      max(day) AS event_ended,
      SUM(event_rows) AS total_participation
FROM
(SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day) AS running_tests
GROUP BY test_id
ORDER BY event_started ASC

test_id	event_started		event_ended	total_participation
4	2013-05-25 00:00:00	2013-06-04 00:00:00	11890
5	2013-09-02 00:00:00	2014-05-21 00:00:00	68563
6	2014-03-31 00:00:00	2014-06-29 00:00:00	43390
7	2016-09-16 00:00:00	2016-12-04 00:00:00	38647

only tests 5,6 coincide whereas tests 4 and 7 run individually


5. Compress the information in events table to include test_id and test assignment in the same row.

SELECT event_id,
       event_time,
       user_id,
       platform,
       MAX(CASE
               WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
               ELSE NULL
           END) AS test_id,
       MAX(CASE
               WHEN parameter_name = 'test_assignment' THEN parameter_value
               ELSE NULL
           END) AS test_assignment
FROM dsv1069.events
WHERE event_name = 'test_assignment'
GROUP BY event_id,
         event_time,
         user_id,
         platform
ORDER BY event_id
limit 10;

event_id				event_time		user_id	platform	test_id	test_assignment
00003d71b9cb41469c05af608a6d2145	2014-04-28 15:23:00	147689	server		5	1
00012e89e2f54bf99180dde02c63e4ad	2016-11-06 15:23:09	225112	server		7	1
00012e8f6da84f33ab9ff53901f5a2f3	2014-04-10 15:23:05	130289	server		6	1
00018d8326b64ce7b016b90282b0d81e	2014-05-13 15:23:05	86365	server		6	0
0001abcf9b824630856a246877a6ef4b	2013-10-19 15:23:00	51995	server		5	1
00023fa0f29e4aa5b5d566cd65dadb4a	2013-10-25 15:23:00	177068	server		5	1
00030a7b59e542298ece94b022d7e177	2014-04-18 15:23:05	52199	server		6	1
000349ab83b147bdaf444815e030f172	2014-05-22 15:23:05	190289	server		6	1
00039923fa2944efabf2b595f3a4b092	2014-05-24 15:23:05	212158	server		6	1
0003cf55eeaf43c59365366a12e66a57	2016-09-23 15:23:09	267952	server		7	0


6. Since tests 5 and 6 are coinciding, check whether any user is part of the treatment group for both tests, if yes then how many?

SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id
ORDER BY assignments DESC
limit 10;

user_id	assignments
21809	2
22055	2
21702	2
21803	2
21859	2
21868	2
21085	2
21673	2
21710	2
22065	2

SELECT assignments,COUNT(*) 
FROM
(SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id) as user_with_assignments
GROUP BY assignments

assignments	count
1		43086
2		6380


7. Compute a metric that measures whether a user created an order after their test assignment, even if a user had zero
 orders, we should have a row that counts their number of orders as zero

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       MAX(CASE
               WHEN orders.created_at > test_events.event_time THEN 1
               ELSE 0
           END) AS orders_after_assignment_binary
FROM
  ( SELECT event_id,
           event_time,
           user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
limit 15;

test_id	test_assignment		user_id		orders_after_assignment_binary
6		1		193270			1
6		0		78468			0
5		1		186989			0
5		1		243459			0
7		0		191680			0
5		0		52717			0
5		0		167261			1
7		0		219682			0
7		0		275208			0
6		1		196521			0
4		0		34611			1
7		1		208839			1
6		1		165912			0
7		0		262305			0
5		1		215646			1


8.  Using the table from the previous exercise, add the following metrics
-- 1) the number of orders/invoices
-- 2) the number of items/line-items ordered
-- 3) the total revenue from the order after treatment

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN invoice_id
                           ELSE NULL
                       END)) AS orders_after_assignment,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN line_item_id
                           ELSE NULL
                       END)) AS items_after_assignment,
       SUM((CASE
                WHEN orders.created_at > test_events.event_time THEN price
                ELSE 0
            END)) AS total_revenue
FROM
  (SELECT event_id,
          event_time,
          user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
ORDER BY total_revenue DESC
limit 10;

test_id	test_assignment	user_id	orders_after_assignment	items_after_assignment	total_revenue
6		1	166460		2			8		4027.5
5		0	166460		2			8		4027.5
6		0	201255		1			4		3675
5		1	201255		1			4		3675
7		1	201255		1			4		3675
5		1	226790		3			10		3637.665
6		0	226790		3			10		3637.665
7		1	226790		3			10		3637.665
5		1	81386		2			5		3534
4		0	117506		1			3		3306

9. Use the order_binary metric from the previous exercise
-- For the proportion metric order binary compute the following:
-- The count of users per treatment group for test_id = 7
-- The count of usrs with orders per treatment group

SELECT test_assignment,
       COUNT(user_id) AS users,
       SUM(order_binary) AS no_of_users_with_orders
FROM
  (SELECT assignments.user_id,
          assignments.test_id,
          assignments.test_assignment,
          MAX(CASE
                  WHEN orders.created_at > assignments.event_time THEN 1
                  ELSE 0
              END) AS order_binary
   FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
   LEFT OUTER JOIN dsv1069.orders
     ON assignments.user_id = orders.user_id
   GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment) user_level
WHERE test_id = 7
GROUP BY test_assignment;

test_assignment	users	no_of_users_with_orders
0		19376		2521
1		19271		2633

10. Create a new tem view binary metric. Count the number
-- of users per treatment group, and count the number of users
-- with views (for test_id 7) (total and within 30 days)

SELECT test_assignment,
       COUNT(user_id) AS users,
       SUM(views_binary) AS views_binary,
       SUM(views_binary_30d) AS views_binary_30d
FROM
  (SELECT assignments.user_id,
          assignments.test_id,
          assignments.test_assignment,
          MAX(CASE
                  WHEN views.event_time > assignments.event_time THEN 1
                  ELSE 0
              END) AS views_binary,
          MAX(CASE
                  WHEN (views.event_time > assignments.event_time
                        AND DATE_PART('day', views.event_time - assignments.event_time) <= 30) THEN 1
                  ELSE 0
              END) AS views_binary_30d
   FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
   LEFT OUTER JOIN
     (SELECT *
      FROM dsv1069.events
      WHERE event_name = 'view_item' ) views
     ON assignments.user_id = views.user_id
   GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment) user_level
WHERE test_id = 7
GROUP BY test_assignment;

test_assignment	users	views_binary	views_binary_30d
0		19376	10290			245
1		19271	10271			237

11. Exercise 4:
-- Create the metric invoices (this is a mean metric, not a binary metric)
-- and for test_id = 7
----The count of users per treatment group
----The average value of the metric per treatment group
----The standard deviation of the metric per treatment group

SELECT test_id,
       test_assignment,
       COUNT(user_id) AS users,
       SUM(line_items) AS tot_line_items,
       AVG(line_items) AS avg_line_items,
       STDDEV(line_items) AS stddev_line_items
FROM
  (SELECT assignments.user_id,
          assignments.test_id,
          assignments.test_assignment,
          COUNT(DISTINCT CASE
                             WHEN orders.created_at > assignments.event_time THEN orders.invoice_id
                             ELSE NULL
                         END) AS invoices,
          COUNT(DISTINCT CASE
                             WHEN orders.created_at > assignments.event_time THEN orders.line_item_id
                             ELSE NULL
                         END) AS line_items,
          COALESCE(SUM(CASE
                           WHEN orders.created_at > assignments.event_time THEN orders.price
                           ELSE 0
                       END), 0) AS total_revenue
   FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
   LEFT OUTER JOIN dsv1069.orders
     ON assignments.user_id = orders.user_id
   GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment) mean_metrics
    WHERE test_id = 4 OR test_id = 5 OR test_id = 6 OR test_id = 7
GROUP BY test_id,
         test_assignment
ORDER BY test_id;


test_id	test_assignment	users	tot_line_items	avg_line_items	stddev_line_items
4		0	7210	2889	0.40069348127600557	1.1074469252621824
4		1	4680	1828	0.3905982905982906	1.0916522830813513
5		0	34420	13551	0.39369552585705986	1.0944797014195913
5		1	34143	13697	0.4011656854992239	1.0980066933060184
6		0	21687	8660	0.3993175635173145	1.105099351707249
6		1	21703	8689	0.4003593973183431	1.1142932685672948
7		0	19376	6964	0.3594137076796036	1.0582284146316883
7		1	19271	7034	0.3650044107726636	1.0510715360420497