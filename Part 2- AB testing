What is AB testing?
 
AB testing is an application of a kind of statistics called hypothesis testing. The idea is that you start with a hypothesis like a new improvement to a website will cause 
some metric to increase. Typically, this metric is tied directly to some business metrics like revenue or could simply be realted to engagement where we are trying if the
new UI is more effective than the older one. So, we can prove or disprove a hypothes is about how user behavior changed. By looking at multiple metrics, we can interpret the
results holistically to gain insight about the effects of the change.

Below are some important steps followed during AB testing-
1. Customers need to meet the eligibility critera for example they should be registered users or have made atleast one purchase in past
2. A diversion point will be created which will be deciding whether they would be put in control or treatment group. Control group is where nothing is changed for the customers
and the treatment group is where customers will be shown the new variant.
3. Their activity is monitored and a null hyposthesis is adopted that states the new variant does not significantly change the user behavior, so the problem boils down to 
the one in hypothesis testing where we reject or fail to reject the null hypothesis.


Some popular AB testing case studies-

A. User welcome email

1. Old variant- Send standard welcome email
2. New variant - Send welcome email with picture of top selling products
3. Eligibility - User must have an account
4. Diversion Point - When automated email is about to be sent
5. Control group gets existing email and treatment group gets updated email
6. Engagement metrics - email opens -> email clicks -> item views -> order completed
7. Business metrics - total orders placed, revenue

A. Push notification to mobile users

1. Old variant - No push notifications
2. New variant - Push notifications about items in cart and not completed the order in past 24 hours
3. Eligibility - User must have an account with valid email address
4. Diversion Point - When automated push notification is about to be sent
5. Control group gets no push notifications and treatment group gets personalised push notifications about items in cart
6. Engagement metrics - push notification recieved -> mobile app visit -> item views - > order completed
7. Business metrics - total orders placed, revenue

SQL queries-

1. Find out the total people who participated in AB testing?

SELECT COUNT(DISTINCT user_id)
FROM dsv1069.events
WHERE event_name = 'test_assignment'

count
97292


2. How many AB tests have run?

SELECT parameter_value
FROM dsv1069.events
WHERE event_name = 'test_assignment' AND
parameter_name = 'test_id'
GROUP BY parameter_value

test_id
4
5
6
7

4 AB tests are running as of now.

3. On each day, how many people participate in any given AB tests?

SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day
limit 10;

test_id		day		event_rows
4	2013-05-25 00:00:00	       1128
4	2013-05-26 00:00:00	       1023
4	2013-05-27 00:00:00	       1088
4	2013-05-28 00:00:00	       1114
4	2013-05-29 00:00:00	       1067
4	2013-05-30 00:00:00	       1072
4	2013-05-31 00:00:00	       1083
4	2013-06-01 00:00:00	       1116
4	2013-06-02 00:00:00  	1073
4	2013-06-03 00:00:00  	1070

4. Finding out the start and end dates of the AB tests and see if any of them coincide?

SELECT test_id,
      min(day) AS event_started,
      max(day) AS event_ended,
      SUM(event_rows) AS total_participation
FROM
(SELECT parameter_value AS test_id,
       DATE(event_time) AS day,
       COUNT(*) AS event_rows
FROM dsv1069.events
WHERE event_name = 'test_assignment'
  AND parameter_name = 'test_id'
GROUP BY parameter_value,
         DATE(event_time)
ORDER BY day) AS running_tests
GROUP BY test_id
ORDER BY event_started ASC

test_id	event_started		event_ended	       total_participation
4	2013-05-25 00:00:00	       2013-06-04 00:00:00	11890
5	2013-09-02 00:00:00	       2014-05-21 00:00:00	68563
6	2014-03-31 00:00:00	       2014-06-29 00:00:00	43390
7	2016-09-16 00:00:00	       2016-12-04 00:00:00	38647

only tests 5,6 coincide whereas tests 4 and 7 run individually

Structuring multiple concurrent AB tests - The only requirement is that the tests should be independent of one another, which means the effect on behaviour a test could have
on a customer should not affect their behaviour on another AB test.


5. Compressing the information in events table to include test_id and test assignment in the same row.

SELECT event_id,
       event_time,
       user_id,
       platform,
       MAX(CASE
               WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
               ELSE NULL
           END) AS test_id,
       MAX(CASE
               WHEN parameter_name = 'test_assignment' THEN parameter_value
               ELSE NULL
           END) AS test_assignment
FROM dsv1069.events
WHERE event_name = 'test_assignment'
GROUP BY event_id,
         event_time,
         user_id,
         platform
ORDER BY event_id
limit 10;

event_id				event_time		user_id	platform	test_id	test_assignment
00003d71b9cb41469c05af608a6d2145	2014-04-28 15:23:00	147689	       server		5	              1
00012e89e2f54bf99180dde02c63e4ad	2016-11-06 15:23:09	225112	       server		7	              1
00012e8f6da84f33ab9ff53901f5a2f3	2014-04-10 15:23:05	130289	       server		6	              1
00018d8326b64ce7b016b90282b0d81e	2014-05-13 15:23:05	86365	       server		6	              0
0001abcf9b824630856a246877a6ef4b	2013-10-19 15:23:00	51995	       server		5	              1
00023fa0f29e4aa5b5d566cd65dadb4a	2013-10-25 15:23:00	177068	       server		5	              1
00030a7b59e542298ece94b022d7e177	2014-04-18 15:23:05	52199	       server		6	              1
000349ab83b147bdaf444815e030f172	2014-05-22 15:23:05	190289	       server		6	              1
00039923fa2944efabf2b595f3a4b092	2014-05-24 15:23:05	212158	       server		6	              1
0003cf55eeaf43c59365366a12e66a57	2016-09-23 15:23:09	267952	       server		7	              0
       

6. Since tests 5 and 6 are coinciding, check whether any user is part of the treatment group for both tests, if yes then how many?

SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id
ORDER BY assignments DESC
limit 10;

user_id	assignments
21809	       2
22055	       2
21702	       2
21803	       2
21859	       2
21868	       2
21085	       2
21673	       2
21710	       2
22065	       2

SELECT assignments,COUNT(*) 
FROM
(SELECT user_id,
       COUNT(test_assignment) AS assignments
FROM
  (SELECT event_id,
          event_time,
          user_id,
          platform,
          MAX(CASE
                  WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                  ELSE NULL
              END) AS test_id,
          MAX(CASE
                  WHEN parameter_name = 'test_assignment' THEN parameter_value
                  ELSE NULL
              END) AS test_assignment
  FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id,
            platform
   ORDER BY event_id) test_events
WHERE test_assignment = '1' and (test_id = 5 OR test_id = 6)
GROUP BY user_id) as user_with_assignments
GROUP BY assignments

assignments	count
1		43086
2		6380


7. Compute a metric that measures whether a user created an order after their test assignment

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       MAX(CASE
               WHEN orders.created_at > test_events.event_time THEN 1
               ELSE 0
           END) AS orders_after_assignment_binary
FROM
  ( SELECT event_id,
           event_time,
           user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
limit 15;

test_id	test_assignment		user_id		orders_after_assignment_binary
6		1		              193270			1
6		0		              78468			0
5		1		              186989			0
5		1		              243459			0
7		0		              191680			0
5		0		              52717			0
5		0		              167261			1
7		0		              219682			0
7		0		              275208			0
6		1		              196521			0
4		0		              34611			1
7		1		              208839			1
6		1		              165912			0
7		0		              262305			0
5		1		              215646			1

8. Creating a new item view user_level metric with total views and views within 30 days 

SELECT assignments.user_id,
       assignments.test_id,
       assignments.test_assignment,
       COUNT(DISTINCT (CASE
                  WHEN views.event_time > assignments.event_time THEN views.parameter_value
                  ELSE NULL
              END)) AS user_views,
       COUNT(DISTINCT(CASE
                  WHEN (views.event_time > assignments.event_time
                        AND DATE_PART('day', views.event_time - assignments.event_time) <= 30) THEN views.parameter_value
                  ELSE NULL
              END)) AS views_binary_30d
FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
LEFT OUTER JOIN
     (SELECT event_time,
      user_id,
      parameter_value
      FROM dsv1069.events
      WHERE event_name = 'view_item' AND 
          parameter_name = 'item_id'
          ) views
      ON assignments.user_id = views.user_id
      GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment 
      HAVING assignments.test_id IS NOT NULL
ORDER BY views_binary_30d DESC
LIMIT 10;

user_id	test_id	test_assignment	user_views	views_binary_30d
26189	           5	              0	           8	              8
22008	           5	              0	           17	              8
157156	           7	              0	           10	              8
163101	           7	              0	           8	              8
26189	           6	              0	           8	              8
14221	           5	              1	           8	              8
23028	           6	              1	           7	              7
10951	           5	              0	           8	              7
25326	           6	              0	           7	              7
11605	           5	              1	           7	              7
              
9. Extending the same analysis from above but now doing it for all treatment groups as whole instead of user_level

SELECT user_level.test_id,
       user_level.test_assignment,
       SUM(user_views) AS total_views,
       SUM(views_binary_30d) AS views_within_30_days
FROM
(SELECT assignments.user_id,
       assignments.test_id,
       assignments.test_assignment,
       COUNT(DISTINCT (CASE
                  WHEN views.event_time > assignments.event_time THEN views.parameter_value
                  ELSE NULL
              END)) AS user_views,
       COUNT(DISTINCT(CASE
                  WHEN (views.event_time > assignments.event_time
                        AND DATE_PART('day', views.event_time - assignments.event_time) <= 30) THEN views.parameter_value
                  ELSE NULL
              END)) AS views_binary_30d
FROM
     (SELECT event_id,
             event_time,
             user_id,
             MAX(CASE
                     WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_id,
             MAX(CASE
                     WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
                     ELSE NULL
                 END) AS test_assignment
      FROM dsv1069.events
      GROUP BY event_id,
               event_time,
               user_id
      ORDER BY event_id) assignments
LEFT OUTER JOIN
     (SELECT event_time,
      user_id,
      parameter_value
      FROM dsv1069.events
      WHERE event_name = 'view_item' AND 
          parameter_name = 'item_id'
          ) views
      ON assignments.user_id = views.user_id
      GROUP BY assignments.user_id,
            assignments.test_id,
            assignments.test_assignment 
      HAVING assignments.test_id IS NOT NULL) user_level
GROUP BY user_level.test_id,
         user_level.test_assignment
         
test_id	test_assignment	total_views	views_within_30_days
4	       0	                 16053	4
4	       1	                 10362	7
5	       0	                 75759	506
5	       1	                 74997	434
6	       0	                 48324	206
6	       1	                 47933	192
7	       0	                 38810	633
7	       1	                 38180	603

10. Conducting AB tests on views within 30 days as 'engagement metrics' and finding out if the new variant creates any statistically significant results



11.  Making a user_level metrics with the following metrics
-- the number of orders/invoices
-- the number of items/line-items ordered
-- the total revenue from the order after treatment

SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN invoice_id
                           ELSE NULL
                       END)) AS orders_after_assignment,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN line_item_id
                           ELSE NULL
                       END)) AS items_after_assignment,
       SUM((CASE
                WHEN orders.created_at > test_events.event_time THEN price
                ELSE 0
            END)) AS total_revenue
FROM
  (SELECT event_id,
          event_time,
          user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id
ORDER BY total_revenue DESC
limit 10;

test_id	test_assignment	user_id	orders_after_assignment	items_after_assignment	total_revenue
6		       1	       166460		       2			              8		4027.5
5		       0	       166460		       2			              8		4027.5
6		       0	       201255		       1			              4		3675
5		       1	       201255		       1			              4		3675
7		       1	       201255		       1			              4		3675
5		       1	       226790		       3			              10		3637.665
6		       0	       226790		       3			              10		3637.665
7		       1	       226790		       3			              10		3637.665
5		       1	       81386		       2			              5		3534
4		       0	       117506		       1			              3		3306
              
11. Extending the same analysis from above but now doing it for all treatment groups as whole instead of user_level

SELECT user_level.test_id,
      user_level.test_assignment,
      COUNT(DISTINCT user_level.user_id) AS no_of_users,
      SUM(user_level.orders_after_assignment) AS total_orders,
      SUM(user_level.items_after_assignment) AS total_items,
      SUM(user_level.total_revenue) AS total_revenue
FROM
(SELECT test_events.test_id,
       test_events.test_assignment,
       test_events.user_id,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN invoice_id
                           ELSE NULL
                       END)) AS orders_after_assignment,
       COUNT(DISTINCT (CASE
                           WHEN orders.created_at > test_events.event_time THEN line_item_id
                           ELSE NULL
                       END)) AS items_after_assignment,
       SUM((CASE
                WHEN orders.created_at > test_events.event_time THEN price
                ELSE 0
            END)) AS total_revenue
FROM
  (SELECT event_id,
          event_time,
          user_id,
 MAX(CASE
         WHEN parameter_name = 'test_id' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_id,
 MAX(CASE
         WHEN parameter_name = 'test_assignment' THEN CAST(parameter_value AS INT)
         ELSE NULL
     END) AS test_assignment
   FROM dsv1069.events
   WHERE event_name = 'test_assignment'
   GROUP BY event_id,
            event_time,
            user_id ) test_events
LEFT JOIN dsv1069.orders
  ON orders.user_id = test_events.user_id
GROUP BY test_events.test_id,
         test_events.test_assignment,
         test_events.user_id) AS user_level
GROUP BY user_level.test_id,
         user_level.test_assignment


test_id	test_assignment	no_of_users	     total_orders   total_items	total_revenue
4	              0	           7210	       1163	       2889	       317624.2250000001
4	              1	           4680	       731	       1828	       185803.29999999993
5	              0	           34420	       5403	       13551	       1406593.2300000002
5	              1	           34143	       5483	       13697	       1415427.9999999935
6	              0	           21687	       3441	       8660	       887280.6550000014
6	              1	           21703	       3499	       8689	       879542.6050000001
7	              0	           19376	       2742	       6964	       701942.2349999994
7	              1	           19271	       2866	       7034	       726171.005000001



12. items views by user can be taken as an engagement metric and and AB test can be performed to find out if the test has been successful in engaging tr customers more
or is the behavior of customers still the same.
              
